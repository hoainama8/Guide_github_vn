4.1 Git trên máy chủ - Giao thức
Tại thời điểm này, bạn sẽ có thể thực hiện hầu hết các công việc hàng ngày mà bạn sẽ sử dụng Git. Tuy nhiên, để thực hiện bất kỳ hoạt động cộng tác nào trong Git, bạn cần có kho lưu trữ Git từ xa. Mặc dù về mặt kỹ thuật, bạn có thể đẩy các thay đổi tới và lấy các thay đổi từ kho lưu trữ của từng cá nhân, nhưng bạn không nên làm như vậy vì bạn có thể dễ dàng nhầm lẫn những gì họ đang làm nếu không cẩn thận. Hơn nữa, bạn muốn cộng tác viên của mình có thể truy cập vào kho lưu trữ ngay cả khi máy tính của bạn ngoại tuyến — việc có một kho lưu trữ chung đáng tin cậy hơn thường rất hữu ích. Do đó, phương pháp ưa thích để cộng tác với ai đó là thiết lập một kho lưu trữ trung gian mà cả hai bạn đều có quyền truy cập, đồng thời đẩy và kéo từ đó.
Chạy máy chủ Git khá đơn giản. Đầu tiên, bạn chọn giao thức nào bạn muốn máy chủ của mình hỗ trợ. Phần đầu tiên của chương này sẽ đề cập đến các giao thức có sẵn cũng như ưu và nhược điểm của từng giao thức. Các phần tiếp theo sẽ giải thích một số thiết lập điển hình bằng cách sử dụng các giao thức đó và cách giúp máy chủ của bạn chạy với chúng. Cuối cùng, chúng ta sẽ xem xét một số tùy chọn được lưu trữ, nếu bạn không ngại lưu trữ mã của mình trên máy chủ của người khác và không muốn gặp rắc rối khi thiết lập và bảo trì máy chủ của riêng mình.
Nếu bạn không quan tâm đến việc chạy máy chủ của riêng mình, bạn có thể bỏ qua phần cuối của chương này để xem một số tùy chọn để thiết lập tài khoản được lưu trữ và sau đó chuyển sang chương tiếp theo, nơi chúng ta thảo luận về các chi tiết khác nhau của hoạt động trong môi trường kiểm soát nguồn phân tán.
Kho lưu trữ từ xa thường là một kho lưu trữ trống — một kho lưu trữ Git không có thư mục làm việc. Vì kho lưu trữ chỉ được sử dụng làm điểm cộng tác nên không có lý do gì để kiểm tra ảnh chụp nhanh trên đĩa; đó chỉ là dữ liệu Git. Nói một cách đơn giản nhất, kho lưu trữ trống là nội dung của thư mục .git của dự án của bạn và không có gì khác.
các giao thức
Git có thể sử dụng bốn giao thức riêng biệt để truyền dữ liệu: Local, HTTP, Secure Shell (SSH) và Git. Ở đây chúng ta sẽ thảo luận về chúng là gì và trong những trường hợp cơ bản nào bạn muốn (hoặc không muốn) sử dụng chúng.
Giao thức cục bộ
Cơ bản nhất là giao thức Local, trong đó kho lưu trữ từ xa nằm trong một thư mục khác trên cùng một máy chủ. Điều này thường được sử dụng nếu mọi người trong nhóm của bạn có quyền truy cập vào hệ thống tệp dùng chung chẳng hạn như giá treo NFS hoặc trong trường hợp ít xảy ra hơn là mọi người đều đăng nhập vào cùng một máy tính. Cách thứ hai sẽ không lý tưởng vì tất cả các phiên bản kho lưu trữ mã của bạn sẽ nằm trên cùng một máy tính, khiến cho khả năng xảy ra tổn thất nghiêm trọng cao hơn nhiều. Nếu bạn có hệ thống tệp được gắn chung thì bạn có thể sao chép, đẩy tới và kéo từ kho lưu trữ dựa trên tệp cục bộ. Để sao chép một kho lưu trữ như thế này hoặc để thêm một kho lưu trữ làm điều khiển từ xa cho một dự án hiện có, hãy sử dụng đường dẫn đến kho lưu trữ làm URL. Ví dụ: để sao chép kho lưu trữ cục bộ, bạn có thể chạy một cái gì đó như thế này:
Sau đó, bạn có thể đẩy tới và kéo từ điều khiển từ xa đó thông qua tên điều khiển từ xa mới local_proj như thể bạn đang thực hiện việc đó qua mạng.
Ưu điểm
Ưu điểm của kho lưu trữ dựa trên tệp là chúng đơn giản và sử dụng các quyền truy cập mạng và quyền truy cập tệp hiện có. Nếu bạn đã có một hệ thống tệp dùng chung mà cả nhóm của bạn có quyền truy cập thì việc thiết lập một kho lưu trữ rất dễ dàng. Bạn dán bản sao kho lưu trữ trống vào một nơi mà mọi người đã chia sẻ quyền truy cập và đặt quyền đọc/ghi giống như đối với bất kỳ thư mục dùng chung nào khác. Chúng ta sẽ thảo luận cách xuất bản sao kho lưu trữ trống cho mục đích này trong Tải Git trên Máy chủ.
Đây cũng là một lựa chọn hay để nhanh chóng lấy tác phẩm từ kho lưu trữ đang làm việc của người khác. Nếu bạn và đồng nghiệp đang làm việc trong cùng một dự án và họ muốn bạn kiểm tra thứ gì đó, thì việc chạy lệnh như git pull /home/john/project thường dễ dàng hơn việc họ đẩy đến một máy chủ từ xa và sau đó bạn tìm nạp từ nó .

Nhược điểm
Nhược điểm của phương pháp này là quyền truy cập chia sẻ thường khó thiết lập và tiếp cận từ nhiều vị trí hơn so với truy cập mạng cơ bản. Nếu bạn muốn đẩy từ máy tính xách tay của mình khi ở nhà, bạn phải gắn ổ đĩa từ xa, việc này có thể khó khăn và chậm so với truy cập dựa trên mạng.

Điều quan trọng cần đề cập là đây không nhất thiết phải là tùy chọn nhanh nhất nếu bạn đang sử dụng một loại giá đỡ chung nào đó. Kho lưu trữ cục bộ chỉ nhanh nếu bạn có quyền truy cập nhanh vào dữ liệu. Kho lưu trữ trên NFS thường chậm hơn kho lưu trữ qua SSH trên cùng một máy chủ, cho phép Git chạy các đĩa cục bộ trên mỗi hệ thống.

Cuối cùng, giao thức này không bảo vệ kho lưu trữ khỏi những hư hỏng do vô tình. Mọi người dùng đều có toàn quyền truy cập shell vào thư mục “từ xa” và không có gì ngăn cản họ thay đổi hoặc xóa các tệp Git nội bộ và làm hỏng kho lưu trữ.
Các giao thức HTTP
Git có thể giao tiếp qua HTTP bằng hai chế độ khác nhau. Trước Git 1.6.6, chỉ có một cách duy nhất có thể thực hiện việc này là rất đơn giản và thường chỉ đọc. Trong phiên bản 1.6.6, một giao thức mới, thông minh hơn đã được giới thiệu liên quan đến việc Git có thể đàm phán truyền dữ liệu một cách thông minh theo cách tương tự như cách nó thực hiện qua SSH. Trong vài năm gần đây, giao thức HTTP mới này đã trở nên rất phổ biến vì nó đơn giản hơn cho người dùng và thông minh hơn về cách giao tiếp. Phiên bản mới hơn thường được gọi là giao thức HTTP thông minh và cách cũ hơn là HTTP ngu ngốc. Trước tiên, chúng tôi sẽ đề cập đến giao thức Smart HTTP mới hơn.
HTTP thông minh
HTTP thông minh hoạt động rất giống với các giao thức SSH hoặc Git nhưng chạy trên các cổng HTTPS tiêu chuẩn và có thể sử dụng nhiều cơ chế xác thực HTTP khác nhau, nghĩa là người dùng thường dễ dàng hơn những thứ như SSH, vì bạn có thể sử dụng những thứ như xác thực tên người dùng/mật khẩu thay vì phải có để thiết lập khóa SSH.
Nó có lẽ đã trở thành cách phổ biến nhất để sử dụng Git hiện nay, vì nó có thể được thiết lập để vừa phục vụ ẩn danh như giao thức git://, vừa có thể được chuyển sang bằng xác thực và mã hóa như giao thức SSH. Thay vì phải thiết lập các URL khác nhau cho những thứ này, giờ đây bạn có thể sử dụng một URL duy nhất cho cả hai. Nếu bạn cố gắng đẩy và kho lưu trữ yêu cầu xác thực (điều này thường phải làm), máy chủ có thể nhắc nhập tên người dùng và mật khẩu. Điều tương tự cũng xảy ra với quyền truy cập đọc.
Trên thực tế, đối với các dịch vụ như GitHub, URL bạn sử dụng để xem kho lưu trữ trực tuyến (ví dụ: https://github.com/schacon/simplegit) chính là URL bạn có thể sử dụng để sao chép và nếu bạn có quyền truy cập, hãy đẩy qua.
HTTP ngu ngốc
Nếu máy chủ không phản hồi với dịch vụ thông minh Git HTTP, máy khách Git sẽ cố gắng quay lại giao thức Dumb HTTP đơn giản hơn. Giao thức Dumb mong muốn kho lưu trữ Git trống sẽ được phân phát giống như các tệp thông thường từ máy chủ web. Cái hay của Dumb HTTP là sự đơn giản trong việc thiết lập nó. Về cơ bản, tất cả những gì bạn phải làm là đặt một kho lưu trữ Git trống bên dưới thư mục gốc tài liệu HTTP của bạn và thiết lập một hook cập nhật sau cụ thể, thế là xong (xem Git Hooks). Tại thời điểm đó, bất kỳ ai có thể truy cập vào máy chủ web mà bạn đặt kho lưu trữ cũng có thể sao chép kho lưu trữ của bạn. Để cho phép quyền truy cập đọc vào kho lưu trữ của bạn qua HTTP, hãy làm như thế này:
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
